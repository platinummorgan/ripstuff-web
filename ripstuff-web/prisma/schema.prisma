generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BannedDevice {
  deviceHash String    @id @map("device_hash") @db.VarChar(128)
  reason     String?   @db.VarChar(280)
  bannedAt   DateTime  @default(now()) @map("banned_at")
  bannedBy   String    @map("banned_by") @db.VarChar(128)
  expiresAt  DateTime? @map("expires_at")
  isActive   Boolean   @default(true) @map("is_active")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@index([isActive, bannedAt], map: "idx_banned_device_active")
  @@index([expiresAt], map: "idx_banned_device_expires")
  @@map("banned_devices")
}

model ContactMessage {
  id               String    @id @default(uuid()) @db.Uuid
  senderDeviceHash String    @map("sender_device_hash") @db.VarChar(128)
  subject          String    @db.VarChar(120)
  message          String
  status           String    @default("UNREAD") @db.VarChar(20)
  createdAt        DateTime  @default(now()) @map("created_at")
  resolvedAt       DateTime? @map("resolved_at")
  moderatorNotes   String?   @map("moderator_notes")

  @@index([senderDeviceHash, createdAt], map: "idx_contact_messages_device_created_at")
  @@index([status, createdAt], map: "idx_contact_messages_status_created_at")
  @@map("contact_messages")
}

model EulogyDraft {
  id         String        @id @default(uuid()) @db.Uuid
  deviceHash String        @map("device_hash") @db.VarChar(128)
  title      String        @db.VarChar(120)
  yearsText  String?       @map("years_text") @db.VarChar(32)
  backstory  String?       @db.VarChar(140)
  category   GraveCategory
  eulogyText String        @map("eulogy_text")
  tokensUsed Int           @map("tokens_used")
  createdAt  DateTime      @default(now()) @map("created_at")
  expiresAt  DateTime      @map("expires_at")
  emotion    String        @default("heartfelt") @db.VarChar(20)

  @@index([deviceHash, createdAt], map: "idx_eulogy_draft_device_created")
  @@map("eulogy_drafts")
}

model Grave {
  id                String             @id @default(uuid()) @db.Uuid
  slug              String             @unique @db.VarChar(128)
  title             String             @db.VarChar(120)
  datesText         String?            @map("dates_text") @db.VarChar(64)
  backstory         String?            @db.VarChar(140)
  photoUrl          String?            @map("photo_url") @db.VarChar(2048)
  eulogyText        String             @map("eulogy_text")
  category          GraveCategory
  status            GraveStatus        @default(PENDING)
  heartCount        Int                @default(0) @map("heart_count")
  candleCount       Int                @default(0) @map("candle_count")
  roseCount         Int                @default(0) @map("rose_count")
  lolCount          Int                @default(0) @map("lol_count")
  featured          Boolean            @default(false)
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  creatorDeviceHash String?            @map("creator_device_hash") @db.VarChar(128)
  mapX              Int?               @map("map_x")
  mapY              Int?               @map("map_y")
  eulogyCount       Int                @default(0) @map("eulogy_count")
  roastCount        Int                @default(0) @map("roast_count")
  moderationTrail   ModerationAction[]
  reactionEvents    ReactionEvent[]
  reports           Report[]
  sympathies        Sympathy[]

  @@index([createdAt], map: "idx_graves_created_at")
  @@index([creatorDeviceHash, createdAt], map: "idx_graves_creator_created_at")
  @@index([mapX, mapY, status], map: "idx_graves_map_coords_status")
  @@index([status, featured, createdAt], map: "idx_graves_status_featured_created_at")
  @@map("graves")
}

model ModerationAction {
  id          String               @id @default(uuid()) @db.Uuid
  graveId     String               @map("grave_id") @db.Uuid
  moderatorId String?              @map("moderator_id") @db.VarChar(64)
  action      ModerationActionType
  reason      String?              @db.VarChar(280)
  createdAt   DateTime             @default(now()) @map("created_at")
  grave       Grave                @relation(fields: [graveId], references: [id], onDelete: Cascade)

  @@index([graveId, createdAt], map: "idx_moderation_grave_created_at")
  @@map("moderation_actions")
}

model OAuthAccount {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  provider   String   @db.VarChar(20)
  providerId String   @map("provider_id") @db.VarChar(100)
  email      String?  @db.VarChar(255)
  name       String?  @db.VarChar(100)
  picture    String?  @db.VarChar(500)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId], map: "uq_oauth_accounts_provider_id")
  @@index([provider], map: "idx_oauth_accounts_provider")
  @@index([userId], map: "idx_oauth_accounts_user_id")
  @@map("oauth_accounts")
}

model RateLimit {
  id          BigInt    @id @default(autoincrement())
  deviceHash  String    @map("device_hash") @db.VarChar(128)
  scope       String    @db.VarChar(64)
  windowStart DateTime  @map("window_start")
  count       Int       @default(0)
  expiresAt   DateTime? @map("expires_at")

  @@index([deviceHash, scope, windowStart], map: "idx_ratelimit_device_scope_window")
  @@map("rate_limits")
}

model ReactionEvent {
  id         BigInt       @id @default(autoincrement())
  graveId    String       @map("grave_id") @db.Uuid
  deviceHash String       @map("device_hash") @db.VarChar(128)
  type       ReactionType @map("reaction_type")
  createdAt  DateTime     @default(now()) @map("created_at")
  grave      Grave        @relation(fields: [graveId], references: [id], onDelete: Cascade)

  @@unique([graveId, deviceHash, type], map: "uq_reaction_grave_device_type")
  @@index([graveId, createdAt], map: "idx_reaction_grave_created_at")
  @@map("reaction_events")
}

model Report {
  id         String    @id @default(uuid()) @db.Uuid
  graveId    String    @map("grave_id") @db.Uuid
  deviceHash String    @map("device_hash") @db.VarChar(128)
  reason     String?   @db.VarChar(280)
  createdAt  DateTime  @default(now()) @map("created_at")
  resolvedAt DateTime? @map("resolved_at")
  grave      Grave     @relation(fields: [graveId], references: [id], onDelete: Cascade)

  @@unique([graveId, deviceHash], map: "uq_report_grave_device")
  @@index([graveId, createdAt], map: "idx_report_grave_created_at")
  @@map("reports")
}

model RoastEulogyReaction {
  id         String          @id @default(uuid()) @db.Uuid
  graveId    String          @map("grave_id") @db.Uuid
  deviceHash String          @map("device_hash") @db.VarChar(128)
  type       RoastEulogyType
  createdAt  DateTime        @default(now()) @map("created_at")

  @@unique([graveId, deviceHash], map: "uq_roast_eulogy_grave_device")
  @@index([graveId, type], map: "idx_roast_eulogy_grave_type")
  @@map("roast_eulogy_reactions")
}

model Sympathy {
  id         String    @id @default(uuid()) @db.Uuid
  graveId    String    @map("grave_id") @db.Uuid
  deviceHash String    @map("device_hash") @db.VarChar(128)
  body       String    @db.VarChar(140)
  createdAt  DateTime  @default(now()) @map("created_at")
  deletedAt  DateTime? @map("deleted_at")
  grave      Grave     @relation(fields: [graveId], references: [id], onDelete: Cascade)

  @@index([deviceHash, createdAt], map: "idx_sympathy_device_created_at")
  @@index([graveId, createdAt], map: "idx_sympathy_grave_created_at")
  @@map("sympathies")
}

model UserModerationAction {
  id               String               @id @default(uuid()) @db.Uuid
  targetUserId     String?              @map("target_user_id") @db.Uuid
  targetDeviceHash String?              @map("target_device_hash") @db.VarChar(128)
  moderatorId      String?              @map("moderator_id") @db.VarChar(64)
  action           ModerationActionType
  reason           String?              @db.VarChar(280)
  expiresAt        DateTime?            @map("expires_at")
  metadata         String?
  createdAt        DateTime             @default(now()) @map("created_at")

  @@index([action, createdAt], map: "idx_user_moderation_action_created_at")
  @@index([targetDeviceHash, createdAt], map: "idx_user_moderation_device_created_at")
  @@index([targetUserId, createdAt], map: "idx_user_moderation_user_created_at")
  @@map("user_moderation_actions")
}

model User {
  id             String         @id @default(uuid()) @db.Uuid
  deviceHash     String?        @map("device_hash") @db.VarChar(128)
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  email          String         @unique @db.VarChar(255)
  name           String?        @db.VarChar(100)
  picture        String?        @db.VarChar(500)
  provider       String         @db.VarChar(20)
  providerId     String         @map("provider_id") @db.VarChar(100)
  isModerator    Boolean        @default(false) @map("is_moderator")
  banExpiresAt   DateTime?      @map("ban_expires_at")
  banReason      String?        @map("ban_reason") @db.VarChar(280)
  bannedAt       DateTime?      @map("banned_at")
  bannedBy       String?        @map("banned_by") @db.VarChar(128)
  isBanned       Boolean        @default(false) @map("is_banned")
  suspendedUntil DateTime?      @map("suspended_until")
  oauthAccounts  OAuthAccount[]

  @@unique([provider, providerId], map: "uq_user_provider_id")
  @@index([isBanned, bannedAt], map: "idx_user_banned")
  @@index([deviceHash], map: "idx_user_device_hash")
  @@index([email], map: "idx_user_email")
  @@index([suspendedUntil], map: "idx_user_suspended")
  @@map("users")
}

model anniversary_reminders {
  id               String       @id @db.Uuid
  grave_id         String       @db.Uuid
  user_id          String?      @db.Uuid
  email            String       @db.VarChar(255)
  device_hash      String       @db.VarChar(128)
  reminder_type    ReminderType @default(YEARLY)
  next_reminder_at DateTime
  is_active        Boolean      @default(true)
  created_at       DateTime     @default(now())
  last_sent_at     DateTime?
  emails_sent      Int          @default(0)

  @@unique([grave_id, email], map: "uq_reminder_grave_email")
  @@index([email, is_active], map: "idx_reminder_email_active")
  @@index([next_reminder_at, is_active], map: "idx_reminder_next_active")
}

model candles_lit {
  id          String   @id @db.Uuid
  grave_id    String   @db.Uuid
  user_id     String?  @db.Uuid
  device_hash String   @db.VarChar(128)
  created_at  DateTime @default(now())

  @@unique([grave_id, device_hash], map: "uq_candle_grave_device")
  @@index([grave_id, created_at], map: "idx_candle_grave_created_at")
  @@index([user_id, created_at], map: "idx_candle_user_created_at")
}

enum GraveCategory {
  TECH_GADGETS
  KITCHEN_FOOD
  CLOTHING_LAUNDRY
  TOYS_GAMES
  CAR_TOOLS
  PETS_CHEWABLES
  OUTDOORS_ACCIDENTS
  MISC
}

enum GraveStatus {
  PENDING
  APPROVED
  HIDDEN
}

enum ModerationActionType {
  APPROVE
  HIDE
  FEATURE
  UNHIDE
  NOTE
  DELETE
  BAN_USER
  UNBAN_USER
  BAN_DEVICE
  UNBAN_DEVICE
  SUSPEND_USER
}

enum ReactionType {
  HEART
  CANDLE
  ROSE
  LOL
}

enum RoastEulogyType {
  ROAST
  EULOGY
}

enum ReminderType {
  YEARLY
  MONTHLY
  NEVER
}
