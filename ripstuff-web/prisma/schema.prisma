generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BannedDevice {
  device_hash String    @id @db.VarChar(128)
  reason      String?   @db.VarChar(280)
  banned_at   DateTime  @default(now())
  banned_by   String    @db.VarChar(128)
  expires_at  DateTime?
  is_active   Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime

  @@map("banned_devices")
  @@index([is_active, banned_at], map: "idx_banned_device_active")
  @@index([expires_at], map: "idx_banned_device_expires")
}

model ContactMessage {
  id                 String    @id @db.Uuid
  sender_device_hash String    @db.VarChar(128)
  subject            String    @db.VarChar(120)
  message            String
  status             String    @default("UNREAD") @db.VarChar(20)
  created_at         DateTime  @default(now())
  resolved_at        DateTime?
  moderator_notes    String?

  @@map("contact_messages")
  @@index([sender_device_hash, created_at], map: "idx_contact_messages_device_created_at")
  @@index([status, created_at], map: "idx_contact_messages_status_created_at")
}

model EulogyDraft {
  id          String        @id @db.Uuid
  device_hash String        @db.VarChar(128)
  title       String        @db.VarChar(120)
  years_text  String?       @db.VarChar(32)
  backstory   String?       @db.VarChar(140)
  category    GraveCategory
  eulogy_text String
  tokens_used Int
  created_at  DateTime      @default(now())
  expires_at  DateTime
  emotion     String        @default("heartfelt") @db.VarChar(20)

  @@map("eulogy_drafts")
  @@index([device_hash, created_at], map: "idx_eulogy_draft_device_created")
}

model Grave {
  id                     String                   @id @db.Uuid
  slug                   String                   @unique @db.VarChar(128)
  title                  String                   @db.VarChar(120)
  dates_text             String?                  @db.VarChar(64)
  backstory              String?                  @db.VarChar(140)
  photo_url              String?                  @db.VarChar(2048)
  eulogy_text            String
  category               GraveCategory
  status                 GraveStatus              @default(PENDING)
  heart_count            Int                      @default(0)
  candle_count           Int                      @default(0)
  rose_count             Int                      @default(0)
  lol_count              Int                      @default(0)
  featured               Boolean                  @default(false)
  created_at             DateTime                 @default(now())
  updated_at             DateTime
  creator_device_hash    String?                  @db.VarChar(128)
  map_x                  Int?
  map_y                  Int?
  eulogy_count           Int                      @default(0)
  roast_count            Int                      @default(0)
  moderation_actions     ModerationAction[]
  reaction_events        ReactionEvent[]
  reports                Report[]
  roast_eulogy_reactions RoastEulogyReaction[]
  sympathies             Sympathy[]

  @@map("graves")

  @@index([created_at], map: "idx_graves_created_at")
  @@index([creator_device_hash, created_at], map: "idx_graves_creator_created_at")
  @@index([map_x, map_y, status], map: "idx_graves_map_coords_status")
  @@index([status, featured, created_at], map: "idx_graves_status_featured_created_at")
}

model ModerationAction {
  id           String               @id @db.Uuid
  grave_id     String               @db.Uuid
  moderator_id String?              @db.VarChar(64)
  action       ModerationActionType
  reason       String?              @db.VarChar(280)
  created_at   DateTime             @default(now())
  grave        Grave                @relation(fields: [grave_id], references: [id], onDelete: Cascade)

  @@map("moderation_actions")
  @@index([grave_id, created_at], map: "idx_moderation_grave_created_at")
}

model OAuthAccount {
  id          String   @id @db.Uuid
  user_id     String   @db.Uuid
  provider    String   @db.VarChar(20)
  provider_id String   @db.VarChar(100)
  email       String?  @db.VarChar(255)
  name        String?  @db.VarChar(100)
  picture     String?  @db.VarChar(500)
  created_at  DateTime @default(now())
  updated_at  DateTime
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("oauth_accounts")
  @@unique([provider, provider_id], map: "uq_oauth_accounts_provider_id")
  @@index([provider], map: "idx_oauth_accounts_provider")
  @@index([user_id], map: "idx_oauth_accounts_user_id")
}

model RateLimit {
  id           BigInt    @id @default(autoincrement())
  device_hash  String    @db.VarChar(128)
  scope        String    @db.VarChar(64)
  window_start DateTime
  count        Int       @default(0)
  expires_at   DateTime?

  @@map("rate_limits")
  @@index([device_hash, scope, window_start], map: "idx_ratelimit_device_scope_window")
}

model ReactionEvent {
  id            BigInt       @id @default(autoincrement())
  grave_id      String       @db.Uuid
  device_hash   String       @db.VarChar(128)
  reaction_type ReactionType
  created_at    DateTime     @default(now())
  grave         Grave        @relation(fields: [grave_id], references: [id], onDelete: Cascade)

  @@map("reaction_events")
  @@unique([grave_id, device_hash, reaction_type], map: "uq_reaction_grave_device_type")
  @@index([grave_id, created_at], map: "idx_reaction_grave_created_at")
}

model Report {
  id          String    @id @db.Uuid
  grave_id    String    @db.Uuid
  device_hash String    @db.VarChar(128)
  reason      String?   @db.VarChar(280)
  created_at  DateTime  @default(now())
  resolved_at DateTime?
  grave       Grave     @relation(fields: [grave_id], references: [id], onDelete: Cascade)

  @@map("reports")
  @@unique([grave_id, device_hash], map: "uq_report_grave_device")
  @@index([grave_id, created_at], map: "idx_report_grave_created_at")
}

model RoastEulogyReaction {
  id          String          @id @db.Uuid
  grave_id    String          @db.Uuid
  device_hash String          @db.VarChar(128)
  type        RoastEulogyType
  created_at  DateTime        @default(now())
  grave       Grave           @relation(fields: [grave_id], references: [id], onDelete: Cascade)

  @@map("roast_eulogy_reactions")
  @@unique([grave_id, device_hash], map: "uq_roast_eulogy_grave_device")
  @@index([grave_id, created_at], map: "idx_roast_eulogy_grave_created_at")
}

model Sympathy {
  id          String    @id @db.Uuid
  grave_id    String    @db.Uuid
  device_hash String    @db.VarChar(128)
  body        String    @db.VarChar(140)
  created_at  DateTime  @default(now())
  deleted_at  DateTime?
  grave       Grave     @relation(fields: [grave_id], references: [id], onDelete: Cascade)

  @@map("sympathies")
  @@index([device_hash, created_at], map: "idx_sympathy_device_created_at")
  @@index([grave_id, created_at], map: "idx_sympathy_grave_created_at")
}

model UserModerationAction {
  id                 String               @id @db.Uuid
  target_user_id     String?              @db.Uuid
  target_device_hash String?              @db.VarChar(128)
  moderator_id       String?              @db.VarChar(64)
  action             ModerationActionType
  reason             String?              @db.VarChar(280)
  expires_at         DateTime?
  metadata           String?
  created_at         DateTime             @default(now())

  @@map("user_moderation_actions")
  @@index([action, created_at], map: "idx_user_moderation_action_created_at")
  @@index([target_device_hash, created_at], map: "idx_user_moderation_device_created_at")
  @@index([target_user_id, created_at], map: "idx_user_moderation_user_created_at")
}

model User {
  id              String         @id @db.Uuid
  device_hash     String?        @db.VarChar(128)
  created_at      DateTime       @default(now())
  updated_at      DateTime
  email           String         @unique @db.VarChar(255)
  name            String?        @db.VarChar(100)
  picture         String?        @db.VarChar(500)
  provider        String         @db.VarChar(20)
  provider_id     String         @db.VarChar(100)
  is_moderator    Boolean        @default(false)
  ban_expires_at  DateTime?
  ban_reason      String?        @db.VarChar(280)
  banned_at       DateTime?
  banned_by       String?        @db.VarChar(128)
  is_banned       Boolean        @default(false)
  suspended_until DateTime?
  oauth_accounts  OAuthAccount[]

  @@map("users")
  @@unique([provider, provider_id], map: "uq_user_provider_id")
  @@index([is_banned, banned_at], map: "idx_user_banned")
  @@index([device_hash], map: "idx_user_device_hash")
  @@index([email], map: "idx_user_email")
  @@index([suspended_until], map: "idx_user_suspended")
}

enum GraveCategory {
  TECH_GADGETS
  KITCHEN_FOOD
  CLOTHING_LAUNDRY
  TOYS_GAMES
  CAR_TOOLS
  PETS_CHEWABLES
  OUTDOORS_ACCIDENTS
  MISC
}

enum GraveStatus {
  PENDING
  APPROVED
  HIDDEN
}

enum ModerationActionType {
  APPROVE
  HIDE
  FEATURE
  UNHIDE
  NOTE
  DELETE
  BAN_USER
  UNBAN_USER
  BAN_DEVICE
  UNBAN_DEVICE
  SUSPEND_USER
}

enum ReactionType {
  HEART
  CANDLE
  ROSE
  LOL
}

enum RoastEulogyType {
  ROAST
  EULOGY
}
